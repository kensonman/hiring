#!/bin/sh


#Init the environment
init()
{
   echo "Initializes the environment..."
   apk add gettext
   # Install the requirements/dependencies
   pip install -r /usr/src/app/requirements.txt 

   # Initializes the database according to the settings
   python ./manage.py migrate 

   # Initializes all the static file(s)... It may no be useful in this project, but keep it as a good practice.
   python ./manage.py collectstatic --noinput 

   # Create the admin user by default
   echo "from django.contrib.auth import get_user_model; 
User = get_user_model();
try:
   User.objects.get(username='admin')
except User.DoesNotExist:
   print('Creating the superuser: admin/changeme ...')
   User.objects.create_superuser('admin', 'admin@kenson.idv.hk', 'changeme')
" | python manage.py shell
}

run()
{
   init

   # Startup the testing server
   echo "Starting the testing server at 0.0.0.0:${PORT} ..."
   python ./manage.py runserver 0.0.0.0:${PORT}
}

test()
{
   init

   # Execute the testing
   echo "Executing the unit test..."
   python ./manage.py test
}

cmd()
{
   init

   # Execute the Django management commands
   python ./manage.py ${*:2}
}

printhelp()
{
   echo "Usage: $0 [action]"
   echo "   Available actions:"
   echo "      run   - Execute the testing server"
   echo "      test  - Execute the unit test"
   echo "      exec  - Execute the specified Django management command"
   echo "               e.g.: $0 exec makemigrations meter --empty --name emptyMigrations"
   echo "      help  - Print this help message"
}

case "$1" in
   run)
      run "$@"
      ;;
   test)
      test "$@"
      ;;
   exec)
      cmd "$@"
      ;;
   *)
      printhelp
      ;;
esac
